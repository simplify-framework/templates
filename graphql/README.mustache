## {{PROJECT_Name}} Project

### Quick Start for AWS

**Pre-requisites: Setup AWS provisioned account profile `{{PROJECT_Profile}}` with ACCESS_KEY_ID and ACCESS_KEY_SECRET**

- Create an IAM User named as `YourAccountUser` and generate Security credentials (Access keys)

    export ACCESS_KEY_ID= `********************`
    export ACCESS_KEY_SECRET= `****************`

- Run the following commands to setup project environment account profile: `{{ENV_Profile}}`

    ```bash
    aws configure set region {{ENV_Region}} --profile {{PROJECT_Profile}}
    aws configure set aws_access_key_id ${ACCESS_KEY_ID} --profile {{PROJECT_Profile}}
    aws configure set aws_secret_access_key ${ACCESS_KEY_SECRET} --profile {{PROJECT_Profile}}
    ```

- Create a JSON file `user-role-policy.json` for `YourAccountUser`:

    ```JSON
    {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Action": [
                    "iam:CreateUser",
                    "iam:CreateRole",
                    "iam:PutUserPolicy",
                    "iam:PutRolePolicy",
                    "iam:CreateAccessKey",
                    "iam:DeleteAccessKey",
                    "iam:DeleteUserPolicy",
                    "iam:DeleteRolePolicy",
                    "iam:DeleteRole",
                    "iam:DeleteUser"
                ],
                "Resource": "*",
                "Effect": "Allow"
            }
        ]
    }
    ```
- Update `YourAccountUser` with provisioned IAM Permissions:

    `aws iam put-user-policy --user-name YourAccountUser --policy-name AccountSetupAccessPolicy --policy-document file://user-role-policy.json`

1. Setup project account for AWS {{ENV_Name}} environment:
    - `npm install && npm audit fix`
    - `npm run account-setup`
2. Deploy project infrastructure resources on AWS {{ENV_Name}} environment:
    - `npm run stack-deploy`
3. Publish local project code on to AWS {{ENV_Name}} environment:
    - `npm run push-code`
4. Update .env configuration for AWS {{ENV_Name}} environment:
    - `npm run push-config`
5. Develop your code, re-design your solution and then re-generate project code
    - `npm run generate-{{ENV_NameSnake}}`
6. Destroy project infrastructure resources on AWS {{ENV_Name}} environment:
    - `npm run stack-destroy`
7. Cleanup project account for AWS {{ENV_Name}} environment:
    - `npm run account-cleanup`

### Create new or switch to an environment:

Using the simplify-graphql generation command with --env options:

`simplify-graphql -i schema.graphql --env=new-or-existing-env`

### Security & Operation commands

    1. npm run monitor-metric   --displaying operation metrics: Invocations, Errors, Durations, Concurrency, Throttles
    2. npm run monitor-config   --displaying configurations: CodeSize, MemorySize, Timeout, Runtime, LastModified
    3. npm run security-check   --checking for consistency: check code function hash, code layers' hashes, security setup
    4. npm run security-patch   --patching for secure encryption: secure function environment, secure log with KMS CMK
    5. npm run take-snapshot    --recording for consistency: save code function hash, code layers' hashes and configuration

    See [Simplify SecOps](https://github.com/simplify-framework/security) for detail commands and optionnal parameters...

### Common knowing issues:

1. Code generation error when designing project from `schema.graphql`

    ```bash
        > simplify-graphql -i schema.graphql --env demo

        TypeError: Cannot read property 'value' of undefined
        - Finish code generation TypeError: Cannot read property 'value' of undefined
    ```

    Caused by: ApolloServer does not accept using REQUIRED* symbol in resolver's input
    eg: deleteBook(title: String!, author: AuthorInput): Book
    > Remote symbol ! in `title: String!`

2. Whenever I re-generate code from `schema.graphql`, some code has been lost due to re-written to default

    > Using `.project-template/..` folder and put your files with your code that you want to keep as it is.

{{#Servers}}
{{#-first}}
3. In my `{{Name}}` GraphQL server, I added 'node-fetch' module into `src/package.json`, it doesnt work on AWS:

    Caused by: simplify-graphql use webpack to optimize project dependancies with lambda layer that has -deps posfix

    > Resolution: add your required dependancies into `src/deps.js` and use it, example with 'node-fetch' module:
    ```Javascript
    /**
     * const fetch = require('node-fetch')
     */
    const fetch = require('{{NameSnake}}-deps')['node-fetch']
    ```
{{/-first}}
{{/Servers}}

**This solution has been generated by using simplify-framework**
 - Latest Version: ![Package Version](https://img.shields.io/github/package-json/v/simplify-framework/graphql?color=green)
 - Latest Status: ![Packge Build/Test](https://github.com/simplify-framework/graphql/workflows/DevOps%20CI/CD/badge.svg)