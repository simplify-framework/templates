'use strict';
/** 
 * Simplify Framework - CodeGen {{generatorVersion}}
 * GitHub URL   : https://github.com/simplify-framework
 * ProjectName  : {{PROJECT_NamePascal}}
 * ProjectId    : {{PROJECT_Id}}
 * License      : Apache-2.0 (Free)
 */
const path = require('path')
const fs = require('fs')
var nodeArgs = process.argv.slice(2);
const opName = `Function`
const simplify = require('simplify-sdk')
const provider = require('simplify-sdk/provider')
var configInputFile = process.env.FUNCTION_INPUT || 'function-input.json'
var configSrcDir = process.env.FUNCTION_SOURCE || 'build'
var functionOps = process.env.FUNCTION_OPS || 'push'
process.env.ENFORCEMENT_PACKAGE = process.env.ENFORCEMENT_PACKAGE || ''
process.env.DEPLOYMENT_STAGE = process.env.DEPLOYMENT_STAGE || 'latest'
process.env.DEPLOYMENT_ENV = process.env.DEPLOYMENT_ENV || 'demo'
while (nodeArgs.length > 1) {
    if (nodeArgs[0] == "--input" || nodeArgs[0] == "-i") {
        configInputFile = nodeArgs[1]
    } else if (nodeArgs[0] == "--src" || nodeArgs[0] == "-s") {
        configSrcDir = nodeArgs[1]
    } else if (nodeArgs[0] == "--ops" || nodeArgs[0] == "-o") {
        functionOps = nodeArgs[1]
    }
    nodeArgs = nodeArgs.slice(2);
}

try {
    var config = simplify.getInputConfig(path.join(__dirname, process.env.DEPLOYMENT_ENV, configInputFile))
    const functionConfig = config.Function
    const bucketName = config.Bucket.Name
    const bucketKey = config.Bucket.Key
    const inputDirectory = path.join(__dirname, configSrcDir)
    const distZippedPath = path.join(__dirname, 'dist')
    const outputFilePath = path.join(distZippedPath, bucketKey)
    provider.setConfig(config).then(function () {
        if (functionOps === 'fetch') {
            simplify.getFunctionMetaInfos({ adaptor: provider.getFunction(), functionConfig}).then(data => {
                let metaOutput = JSON.parse(fs.readFileSync(path.join(__dirname, config.OutputFile)))
                fs.writeFileSync(path.join(__dirname, config.OutputFile), JSON.stringify({
                    ...metaOutput, ...data
                }, null, 4));
            }).catch(err => simplify.finishWithErrors(`${opName}-Fetch`, err))
        } else if (functionOps === 'update') {
            simplify.updateFunctionConfiguration({ adaptor: provider.getFunction(), functionConfig}).then(data => {
                if (fs.existsSync(path.join(__dirname, process.env.DEPLOYMENT_ENV, "attached-policy.json"))) {
                    const policyDocument = JSON.parse(fs.readFileSync(path.join(__dirname, process.env.DEPLOYMENT_ENV, "attached-policy.json")))
                    simplify.updateFunctionRolePolicy({ adaptor: provider.getIAM(), functionConfig, policyDocument: policyDocument }).then(policy => {
                        let metaOutput = JSON.parse(fs.readFileSync(path.join(__dirname, config.OutputFile)))
                        fs.writeFileSync(path.join(__dirname, config.OutputFile), JSON.stringify({
                            Configuration: { ...metaOutput.Configuration, ...data }
                        }, null, 4));    
                    }).catch(err => simplify.finishWithErrors(`${opName}-Policy`, err))
                } else {
                    let metaOutput = JSON.parse(fs.readFileSync(path.join(__dirname, config.OutputFile)))
                    fs.writeFileSync(path.join(__dirname, config.OutputFile), JSON.stringify({
                        Configuration: { ...metaOutput.Configuration, ...data }
                    }, null, 4));  
                }
            }).catch(err => simplify.finishWithErrors(`${opName}-Config`, err))
        } else {
            simplify.uploadDirectoryAsZip({
                adaptor: provider.getStorage(), ...{
                    bucketKey, inputDirectory, outputFilePath, fileName: 'latest',
                    hashInfo: simplify.getFunctionSha256(path.join(__dirname, config.OutputFile), `SHA256_FUNCTION_CODE_HASH`)
                }
            }).then(function (uploadInfor) {
                if (uploadInfor.Key) {
                    simplify.createOrUpdateFunction({
                        adaptor: provider.getFunction(),
                        ...{ functionConfig, bucketName, bucketKey: uploadInfor.Key }
                    }).then(function (data) {
                        data.Environment.Variables.SHA256_FUNCTION_CODE_HASH = uploadInfor.FileSha256
                        fs.writeFileSync(path.join(__dirname, config.OutputFile), JSON.stringify({
                            Configuration: data
                        }, null, 4));
                    }, function (err) {
                        simplify.finishWithErrors(`${opName}-Update`, err)
                    })
                } else {
                    simplify.finishWithSuccess(`${uploadInfor.HashSource} is UP_TO_DATE`)
                }
            }, function (err) {
                simplify.finishWithErrors(`${opName}-UploadZip`, err)
            })
        }
    }).catch(function (err) {
        simplify.finishWithErrors(`${opName}-SetConfig`, err)
    })
} catch (err) {
    simplify.finishWithErrors(`${opName}-LoadConfig`, err)
}
