'use strict';
/** 
 * Simplify Framework - GraphQL {{GeneratorVersion}}
 * GitHub URL   : https://github.com/simplify-framework
 * ProjectName  : {{PROJECT_NamePascal}}
 * ProjectId    : {{PROJECT_Id}}
 * License      : Apache-2.0 (Free)
 */
const defaultHeaders = {
    "X-Frame-Options": "DENY",
    "X-XSS-Protection": "1; mode=block",
    "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
    "X-Content-Type-Options": "nosniff",
    "Content-Type": "application/json"
}
if (typeof __non_webpack_require__ === 'undefined') global.__non_webpack_require__ = require
const AWS = __non_webpack_require__('aws-sdk');
const lambda = new AWS.Lambda({ apiVersion: '2015-03-31' });
const jsonify = require('./jsonify')
const operationFunctions = {
{{#Definitions}}
// {{{Definition}}}
{{#Paths}}
// POST {{Path}} {{#Options}}using {{AuthMode}} authorization with ApiKey={{ApiKey}}{{/Options}}
{{#Resolvers}}
    {{OperationId}}: [ {{#Resolver}}{{#Chains}}{{#RemoteExecutionMode}}{{#Run}}"{{Name}}"{{/Run}}{{/RemoteExecutionMode}}{{^RemoteExecutionMode}}null{{/RemoteExecutionMode}}{{#hasMore}}, {{/hasMore}}{{/Chains}}{{/Resolver}} ]{{#hasMore}},{{/hasMore}}
{{/Resolvers}}
{{#hasMore}},{{/hasMore}}{{^hasMore}},// END{{/hasMore}}
{{/Paths}}
{{/Definitions}}
}

exports.wakeup = function(operations, callback) {
    let response = { ops: 0, invoked: 0, errors: 0 }
    operations.forEach(op => {
        (operationFunctions[op] || []).filter(x => x != null).forEach(opf => {
            /* eslint-disable-next-line security/detect-non-literal-require */
            const parameters = require(`../Functions/${opf}/parameters.json`)
            var params = {
                FunctionName: parameters.FunctionName, 
                InvokeArgs: Buffer.from(jsonify.stringify({
                    eventType: 'PING'
                }), "utf-8")
            };
            response.invoked++
            lambda.invokeAsync(params, function(err, data) {
                err ? response.errors++ : response.errors
            });
        })
        response.ops++
    })
    callback(null, { statusCode: 200, body: JSON.stringify(response), headers: defaultHeaders })
}
