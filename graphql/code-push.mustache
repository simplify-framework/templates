#!/bin/bash
# Simplify Automatic Deployment Script
# Project: {{ProjectNamePascal}}
# Deployment: {{ProjectName}}
# Region: {{DeploymentRegion}}
# Profile: {{DeploymentProfile}}
# Version: {{ProjectVersion}}
INITIAL_DIR=$PWD
ENV_FILE=${1:-".env"}
FUNC_OPS=${2:-"push"}

`grep -v '^#' ${ENV_FILE} | sed -E 's|^(.+)=(.*)$|export \1=\2|g'`

node .simplify-graphql/code-init.js --input deployment-input.json

declare -a DEPLOYMENT_PACKAGES=(
{{#Servers}}
    "{{Name}}"
{{/Servers}}
{{#Functions}}
    "RemoteFunctions/{{FunctionName}}"
{{/Functions}})
declare -a DEPLOYMENT_LANGUAGES=({{#Servers}}"{{Language}}"{{#hasMore}} {{/hasMore}}{{/Servers}} {{#Functions}}"{{Language}}"{{#hasMore}} {{/hasMore}}{{/Functions}})
declare -a DEPLOYMENT_RUNTIMES=({{#Servers}}"{{Runtime}}"{{#hasMore}} {{/hasMore}}{{/Servers}} {{#Functions}}"{{Runtime}}"{{#hasMore}} {{/hasMore}}{{/Functions}})

for i in "${!DEPLOYMENT_PACKAGES[@]}"; do
    DeploymentPackageName=${DEPLOYMENT_PACKAGES[$i]}
    DeploymentPackageKey=`echo "${DeploymentPackageName}" | tr '/' '_'`
    DeploymentStageName="ENV_${DeploymentPackageKey}_DEPLOYMENT_STAGE"
    export DEPLOYMENT_STAGE="${!DeploymentStageName}"
    EnforcementPackageName="ENV_${DeploymentPackageKey}_ENFORCEMENT_PACKAGE"
    export ENFORCEMENT_PACKAGE="${!EnforcementPackageName}"
    DeploymentLayerName="ENV_${DeploymentPackageKey}_DEPLOYMENT_LAYER"
    if [ -z "${DEPLOYMENT_STAGE}" ]; then
        echo "Pushing ${DeploymentPackageName} with blank DEPLOYMENT_STAGE is not satified!"
        continue
    fi
    cd ${INITIAL_DIR}/${DeploymentPackageName} && npm install
    if [ "${FUNC_OPS}" == "update" ]; then
        npm run push-update
        if [ $? -ne 0 ]; then
            echo "Update ${DeploymentPackageName} (${DEPLOYMENT_STAGE}) has failed!"
            cd ${INITIAL_DIR}
            exit 255
        fi
    else
        if [ "${DEPLOYMENT_STAGE}" == "latest" ]; then
            npm run build-code && npm run push-code
            npm run build-deps && npm run push-deps
            if [ $? -ne 0 ]; then
                echo "Pushing ${DeploymentPackageName} (${DEPLOYMENT_STAGE}) code has failed!"
                cd ${INITIAL_DIR}
                exit 255
            fi
        elif [ "${DEPLOYMENT_STAGE}" == "stable" ]; then
            npm run build-code && npm run push-code
            if [ $? -ne 0 ]; then
                echo "Pushing ${DeploymentPackageName} (${DEPLOYMENT_STAGE}) code has failed!"
                cd ${INITIAL_DIR}
                exit 255
            fi
            npm run build-layer && npm run push-layer
            if [ $? -ne 0 ]; then
                echo "Pushing ${DeploymentPackageName}:${!DeploymentLayerName} (${DEPLOYMENT_STAGE}) layer has failed!"
                cd ${INITIAL_DIR}
                exit 255
            fi
        elif [ "${DEPLOYMENT_STAGE}" == "enforce" ]; then
            if [ ! -z "${ENFORCEMENT_PACKAGE}" ]; then
                npm run build-code && npm run push-code
                if [ $? -ne 0 ]; then
                    echo "Pushing ${DeploymentPackageName} (${DEPLOYMENT_STAGE}) code has failed!"
                    cd ${INITIAL_DIR}
                    exit 255
                fi
                npm run build-layer 
                if [ "${DEPLOYMENT_LANGUAGES[$i]}" == "js" ]; then
                    mv layer/nodejs/node_modules/${!DeploymentLayerName} layer/nodejs/node_modules/${ENFORCEMENT_PACKAGE}
                elif [ "${DEPLOYMENT_LANGUAGES[$i]}" == "py" ]; then
                    DeploymentLayerNameUnderscore=`echo "${!DeploymentLayerName}" | tr '-' '_'`
                    EnforcementPackageUnderscore=`echo "${ENFORCEMENT_PACKAGE}" | tr '-' '_'`
                    mv layer/python/${DeploymentLayerNameUnderscore}.py layer/python/${EnforcementPackageUnderscore}.py
                else
                    mv layer/java/${!DeploymentLayerName}.jar layer/java/${ENFORCEMENT_PACKAGE}.jar
                fi
                npm run push-layer
                if [ $? -ne 0 ]; then
                    echo "Pushing ${DeploymentPackageName}:${ENFORCEMENT_PACKAGE} (${DEPLOYMENT_STAGE}) layer has failed!"
                    cd ${INITIAL_DIR}
                    exit 255
                fi
            fi
        else
            npm run build-code && npm run push-code
            if [ $? -ne 0 ]; then
                echo "Pushing ${DeploymentPackageName} (${DEPLOYMENT_STAGE}) code has failed!"
                cd ${INITIAL_DIR}
                exit 255
            fi
        fi
    fi
    cd ${INITIAL_DIR}
done
