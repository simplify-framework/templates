AWSTemplateFormatVersion: '2010-09-09'
Description: API Gateway resource stack creation using Simplify CLI
Parameters:
  DeploymentEnv:
    Type: String
  ApiAuthorizerId:
    Type: String
  {{#Servers}}
  {{Name}}SecretKeyVault:
    Type: String
  {{Name}}ManagedResourceArn:
    Type: String
  {{/Servers}}
  {{#Functions}}
  {{FunctionName}}SecretKeyVault:
    Type: String
  {{FunctionName}}ManagedResourceArn:
    Type: String
  {{/Functions}}

Conditions:
  {{#Servers}}
  Has{{NamePascal}}SecretKeyVault: !Not [ !Equals [ !Ref {{Name}}SecretKeyVault, 'NO' ] ]
  Has{{NamePascal}}ManagedResourceArn: !Not [ !Equals [ !Ref {{Name}}ManagedResourceArn, 'NO' ] ]
  {{/Servers}}
  {{#Functions}}
  Has{{FunctionNamePascal}}SecretKeyVault: !Not [ !Equals [ !Ref {{FunctionName}}SecretKeyVault, 'NO' ] ]
  Has{{FunctionNamePascal}}ManagedResourceArn: !Not [ !Equals [ !Ref {{FunctionName}}ManagedResourceArn, 'NO' ] ]
  {{/Functions}}

Resources:
{{#Servers}}
  {{Name}}:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: '{{Name}} GraphQL API Gateway'
      Name: {{ProjectName}}{{DeploymentEnvPascal}}-{{Name}}
      Body:
        swagger: '2.0'
        info:
          version: '2017-04-20T04:08:08Z'
          title: {{Name}}        
        host:
          Fn::Join:
          - ''
          - - apigateway.
            - Ref: AWS::Region
            - ".amazonaws.com"
        basePath:
          Fn::Join:
          - ''
          - - "/"
            - "graphql"
        schemes:
        - https
        x-amazon-apigateway-request-validators:
          Passthrough:
            validateRequestParameters: false
            validateRequestBody: false
          Validate body:
            validateRequestParameters: false
            validateRequestBody: true
          Validate query string parameters and headers:
            validateRequestParameters: true
            validateRequestBody: false
        x-amazon-apigateway-request-validator: Passthrough
        paths:
          {{#Definitions}}
          {{#Paths}}      
          "{{Path}}":
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
            post:
              consumes:
              - application/json
              produces:
              - application/json
              parameters:
              - in: body
                name: RequestSchema
                required: false
                schema:
                  "$ref": "#/definitions/RequestSchema"
              security:
              {{#Options}}
              {{#HasApiKey}}
              - APIKeyAuthorizer: []
              {{/HasApiKey}}
              {{#HasAuthorizer}}
              - CognitoAuthorizer: []
              {{/HasAuthorizer}}
              {{^HasAuthorizer}}
              {{#HasSigV4}}
              - sigv4: []
              {{/HasSigV4}}
              {{^HasSigV4}}
              {{^HasApiKey}}
              - {}
              {{/HasApiKey}}
              {{/HasSigV4}}
              {{/HasAuthorizer}}
              {{/Options}}
              responses:
                '200':
                  description: 200 response
                  schema:
                    "$ref": "#/definitions/ResponseSchema"                                    
              x-amazon-apigateway-request-validator: Passthrough
              x-amazon-apigateway-integration:                
                responses:
                  default:
                    statusCode: '200'                
                uri:
                  Fn::Join:
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref AWS::Region
                    - ":lambda:path/2015-03-31/functions/"
                    - !GetAtt {{Name}}LambdaFunction.Arn
                    - "/invocations"                
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          {{/Paths}}
          {{/Definitions}}
        securityDefinitions:
          sigv4:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: awsSigv4
          APIKeyAuthorizer:
            type: apiKey
            name: x-api-key
            in: header
          {{#AuthorizerId}}
          CognitoAuthorizer:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              type: cognito_user_pools
              providerARNs:
              - Fn::Sub:
                - arn:aws:cognito-idp:${region}:${account}:userpool/${userPoolId}
                - region:
                    !Ref AWS::Region
                  account:
                    !Ref AWS::AccountId
                  userPoolId:
                    !Ref ApiAuthorizerId
          {{/AuthorizerId}}
        definitions:
          RequestSchema:
            type: object
            required:
            - data
            properties:
              data:
                type: object
            title: Request Schema
          ResponseSchema:
            type: object
            required:
            - data
            properties:
              data:
                type: object
            title: Response Schema        
      FailOnWarnings: true

  {{Name}}APIGateWayDeployment:
    DependsOn: {{Name}}
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: The Development stage deployment of {{Name}} API.
      StageName: !Ref DeploymentEnv
      RestApiId:
        !Ref {{Name}}

  {{Name}}APIGateWayUsagePlan:
    DependsOn: {{Name}}APIGateWayDeployment
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      Description: The quota limits of {{Name}} API.
      UsagePlanName: {{Name}}-DefaultPlan
      ApiStages:
      - ApiId: !Ref {{Name}}
        Stage: !Ref DeploymentEnv
      {{#Options}}
      Throttle:
        BurstLimit: {{BurstLimit}}
        RateLimit: {{RateLimit}}
      Quota:
        Limit: {{QuotaLimit}}
        Period: "{{QuotaUnit}}"
      {{/Options}}

  {{Name}}APIGateWayApiKey:
    DependsOn: {{Name}}APIGateWayDeployment
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Enabled: true
      StageKeys: 
        - RestApiId: !Ref {{Name}}
          StageName: !Ref DeploymentEnv
      Value: {{Name}}-{{DeploymentApiKey}}
  
  {{Name}}APIGateWayUsagePlanKey:
    DependsOn: {{Name}}APIGateWayApiKey
    Type: AWS::ApiGateway::UsagePlanKey
    Properties: 
      KeyId: !Ref {{Name}}APIGateWayApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref {{Name}}APIGateWayUsagePlan

  {{Name}}LambdaFunction:
    Type: AWS::Lambda::Function
    Metadata:
      aws:asset:path: "./src"
      aws:asset:property: Code
    Properties:
      Handler: index.handler      
      Environment:
        Variables:
          DEPLOYMENT_ENV: {{DeploymentEnvSnake}}
      Role:
        Fn::GetAtt:
        - {{Name}}LambdaExecutionRole
        - Arn
      Runtime: {{Runtime}}
      Timeout: '15'
      Code:
        ZipFile: |
          {{RuntimeCode}}

  {{Name}}LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:      
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - !If [Has{{NamePascal}}ManagedResourceArn, !Ref {{Name}}ManagedResourceArn, !Ref "AWS::NoValue"]

  {{Name}}LambdaExecutionPolicy:
    DependsOn:
    - {{Name}}LambdaExecutionRole
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Join:
        - ""
        - - !Ref {{Name}}LambdaFunction
          - LambdaExecutionPolicy
      Roles:
      - !Ref {{Name}}LambdaExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - Fn::Sub:
            - arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${groupname}:log-stream:*
            - region:
                !Ref AWS::Region
              account:
                !Ref AWS::AccountId
              groupname:
                !Ref {{Name}}LambdaFunction

  {{Name}}LambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: {{Name}}LambdaFunction
    Properties:
      LogGroupName:
        Fn::Join:
        - ""
        - - '/aws/lambda/'
          - !Ref {{Name}}LambdaFunction
      RetentionInDays: 14

  {{Name}}Secret:
    Condition: Has{{NamePascal}}SecretKeyVault
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        Fn::Join:
          - "-"
          - - {{ProjectName}}{{DeploymentEnvPascal}}
            - {{Name}}Secret
      Description: Secret manager for {{Name}}LambdaFunction
      GenerateSecretString:
        SecretStringTemplate: !Ref {{Name}}SecretKeyVault
        GenerateStringKey: {{NamePascal}}Key
        ExcludeCharacters: '"@/\'
        ExcludeLowercase: false
        ExcludeNumbers: false
        ExcludePunctuation: false
        ExcludeUppercase: false
        PasswordLength: 48

  {{Name}}SecretRotationSchedule:
    Condition: Has{{NamePascal}}SecretKeyVault
    Type: AWS::SecretsManager::RotationSchedule
    DependsOn: {{Name}}LambdaFunction
    Properties:
      SecretId: !Ref {{Name}}Secret
      RotationLambdaARN: !GetAtt {{Name}}LambdaFunction.Arn
      RotationRules:
        AutomaticallyAfterDays: 30

  {{Name}}SecretLambdaInvokePermission:
    Condition: Has{{NamePascal}}SecretKeyVault
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt {{Name}}LambdaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: secretsmanager.amazonaws.com

  {{Name}}SecretMangerPolicy:
    Condition: Has{{NamePascal}}SecretKeyVault
    DependsOn:
    - {{Name}}LambdaExecutionRole
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Join:
        - ""
        - - !Ref {{Name}}LambdaFunction
          - SecretMangerPolicy
      Roles:
      - !Ref {{Name}}LambdaExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - secretsmanager:GetSecretValue
          - secretsmanager:PutSecretValue
          Resource:
          - Fn::Sub:
            - arn:aws:secretsmanager:${region}:${account}:${secretname}-*
            - region:
                !Ref AWS::Region
              account:
                !Ref AWS::AccountId
              secretname:
                !Ref {{Name}}Secret

  {{Name}}LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref {{Name}}LambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":"
          - !Ref {{Name}}
          - "/*/*/*"
{{/Servers}}

{{#Functions}}
  {{FunctionName}}LambdaFunction:
    Type: AWS::Lambda::Function
    Metadata:
      aws:asset:path: "./src"
      aws:asset:property: Code
    Properties:
      Handler: index.handler      
      Environment:
        Variables:
          DEPLOYMENT_ENV: {{DeploymentEnvSnake}}
      Role:
        Fn::GetAtt:
        - {{FunctionName}}LambdaExecutionRole
        - Arn
      Runtime: {{Runtime}}
      Timeout: '15'
      Code:
        ZipFile: |
          {{RuntimeCode}}

  {{FunctionName}}LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:      
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - !If [Has{{FunctionNamePascal}}ManagedResourceArn, !Ref {{FunctionName}}ManagedResourceArn, !Ref "AWS::NoValue"]

  {{FunctionName}}LambdaExecutionPolicy:
    DependsOn:
    - {{FunctionName}}LambdaExecutionRole
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Join:
        - ""
        - - !Ref {{FunctionName}}LambdaFunction
          - LambdaExecutionPolicy
      Roles:
      - !Ref {{FunctionName}}LambdaExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - Fn::Sub:
            - arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${groupname}:log-stream:*
            - region:
                !Ref AWS::Region
              account:
                !Ref AWS::AccountId
              groupname:
                !Ref {{FunctionName}}LambdaFunction

  {{FunctionName}}LambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: {{FunctionName}}LambdaFunction
    Properties:
      LogGroupName:
        Fn::Join:
        - ""
        - - '/aws/lambda/'
          - !Ref {{FunctionName}}LambdaFunction
      RetentionInDays: 14

  {{FunctionName}}ResolverExecutionPolicy:
    DependsOn:
    {{#Servers}}
    - {{ServerName}}LambdaExecutionRole
    {{/Servers}}
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Join:
        - ""
        - - !Ref {{FunctionName}}LambdaFunction
          - ResolverExecutionPolicy
      Roles:
      {{#Servers}}
      - !Ref {{ServerName}}LambdaExecutionRole
      {{/Servers}}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - lambda:InvokeFunction
          - lambda:InvokeAsync
          Resource:
          - !GetAtt {{FunctionName}}LambdaFunction.Arn

  {{FunctionName}}Secret:
    Condition: Has{{FunctionNamePascal}}SecretKeyVault
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        Fn::Join:
          - "-"
          - - {{ProjectName}}{{DeploymentEnvPascal}}
            - {{FunctionName}}Secret
      Description: Secret manager for {{FunctionName}}LambdaFunction
      GenerateSecretString:
        SecretStringTemplate: !Ref {{FunctionName}}SecretKeyVault
        GenerateStringKey: {{FunctionNamePascal}}Key
        ExcludeCharacters: '"@/\'
        ExcludeLowercase: false
        ExcludeNumbers: false
        ExcludePunctuation: false
        ExcludeUppercase: false
        PasswordLength: 48

  {{FunctionName}}SecretRotationSchedule:
    Condition: Has{{FunctionNamePascal}}SecretKeyVault
    Type: AWS::SecretsManager::RotationSchedule
    DependsOn: {{FunctionName}}LambdaFunction
    Properties:
      SecretId: !Ref {{FunctionName}}Secret
      RotationLambdaARN: !GetAtt {{FunctionName}}LambdaFunction.Arn
      RotationRules:
        AutomaticallyAfterDays: 30

  {{FunctionName}}SecretLambdaInvokePermission:
    Condition: Has{{FunctionNamePascal}}SecretKeyVault
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt {{FunctionName}}LambdaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: secretsmanager.amazonaws.com

  {{FunctionName}}SecretMangerPolicy:
    Condition: Has{{FunctionNamePascal}}SecretKeyVault
    DependsOn:
    - {{FunctionName}}LambdaExecutionRole
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Join:
        - ""
        - - !Ref {{FunctionName}}LambdaFunction
          - SecretMangerPolicy
      Roles:
      - !Ref {{FunctionName}}LambdaExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - secretsmanager:GetSecretValue
          - secretsmanager:PutSecretValue
          Resource:
          - Fn::Sub:
            - arn:aws:secretsmanager:${region}:${account}:${secretname}-*
            - region:
                !Ref AWS::Region
              account:
                !Ref AWS::AccountId
              secretname:
                !Ref {{FunctionName}}Secret
{{/Functions}}

Outputs:
  Region:
    Description: AWS Deployment Region
    Value: !Ref AWS::Region
  StageName:
    Description: API Deployment stage
    Value: !Ref DeploymentEnv
  {{#Servers}}
  {{Name}}Url:
    Description: Root URL of the API gateway
    Value:
      Fn::Join:
      - ''
      - - https://
        - !Ref {{Name}}
        - ".execute-api."
        - !Ref AWS::Region
        - ".amazonaws.com/"
        - !Ref DeploymentEnv
  {{Name}}Id:
    Description: API Gateway id
    Value: !Ref {{Name}}
  {{Name}}FunctionArn:
    Description: {{Name}} Function ARN
    Value: !GetAtt {{Name}}LambdaFunction.Arn
  {{Name}}FunctionName:
    Description: {{Name}} Function Name
    Value: !Ref {{Name}}LambdaFunction
  {{Name}}FunctionRole:
    Description: {{Name}} Execution Role ARN
    Value: !GetAtt {{Name}}LambdaExecutionRole.Arn
  {{/Servers}}
  {{#Functions}}
  {{FunctionName}}FunctionArn:
    Description: {{FunctionName}} Function ARN
    Value: !GetAtt {{FunctionName}}LambdaFunction.Arn
  {{FunctionName}}FunctionName:
    Description: {{FunctionName}} Function Name
    Value: !Ref {{FunctionName}}LambdaFunction
  {{FunctionName}}FunctionRole:
    Description: {{FunctionName}} Execution Role ARN
    Value: !GetAtt {{FunctionName}}LambdaExecutionRole.Arn
  {{/Functions}}
