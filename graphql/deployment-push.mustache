'use strict';
/** 
 * Simplify Framework - GraphQL {{GeneratorVersion}}
 * GitHub URL   : https://github.com/simplify-framework
 * ProjectName  : {{PROJECT_NamePascal}}
 * ProjectId    : {{PROJECT_Id}}
 * License      : Apache-2.0 (Free)
 */
const path = require('path')
const fs = require('fs')
const opName = `Deployment`
const simplify = require('simplify-sdk')
const provider = require('simplify-sdk/provider')
var nodeArgs = process.argv.slice(2);
var configResourceDeletion = false
var configInputFile = process.env.DEPLOYMENT_INPUT || 'deployment-input.json'
require('dotenv').config({ path: path.resolve(__dirname, '..', '.env') })
while (nodeArgs.length > 0) {
    if (nodeArgs[0] == "--input" || nodeArgs[0] == "-i") {
        configInputFile = nodeArgs[1]
        nodeArgs = nodeArgs.slice(2);
    } else if (nodeArgs[0] == "--deletion" || nodeArgs[0] == "-d") {
        configResourceDeletion = true
        nodeArgs = nodeArgs.slice(1);
    }
}
try {
    var config = simplify.getInputConfig(path.join(__dirname, process.env.DEPLOYMENT_ENV, configInputFile))
    const distYamlFile = path.join(__dirname, config.Deployment.Definition)
    const bucketName = config.Bucket.Name
    const bucketKey = config.Bucket.Key
    provider.setConfig(config).then(function () {
        if (configResourceDeletion) {
            let functionIndex = 0
            const cleanupResources = { ...config.Deployment.Servers, ...config.Deployment.Functions }
            simplify.consoleWithMessage(`${opName}-CleanupResource`, `Deployment Name - (${config.Deployment.Name})`)
            Object.keys(cleanupResources).forEach(function (f) {
                const fInputPath = path.join(__dirname, cleanupResources[f].FunctionInput)
                var fConfig = JSON.parse(fs.readFileSync(fInputPath))
                simplify.deleteFunctionRolePolicy({
                    adaptor: provider.getIAM(),
                    functionConfig: fConfig.Function
                }).then(function() {
                    if (++functionIndex >=Object.keys(cleanupResources).length) {
                        simplify.deleteStackOnComplete({
                            adaptor: provider.getResource(),
                            ...{
                                stackName: config.Deployment.Name
                            }
                        }).then(function (stackData) {
                            if (fs.existsSync(path.join(__dirname, config.OutputFile))) {
                                fs.unlinkSync(path.join(__dirname, config.OutputFile))
                            }
                            simplify.deleteDeploymentBucket({ adaptor: provider.getStorage(), bucketName: bucketName }).then(function() {
                                Object.keys(cleanupResources).forEach(function (f) {
                                    const fInputPath = path.join(__dirname, cleanupResources[f].FunctionInput)
                                    var fConfig = JSON.parse(fs.readFileSync(fInputPath))
                                    simplify.deleteFunctionLayerVersions({
                                        adaptor: provider.getFunction(),
                                        functionConfig: fConfig.Function
                                    }).then(function(data) {
                                        delete fConfig.Function.Layers
                                        fs.writeFileSync(fInputPath, JSON.stringify(fConfig, null, 4))
                                        if (fs.existsSync(path.join(path.dirname(fInputPath), path.basename(fConfig.OutputFile)))) {
                                            fs.unlinkSync(path.join(path.dirname(fInputPath), path.basename(fConfig.OutputFile)))
                                        }
                                        if (data.length) {
                                            simplify.consoleWithMessage(`${opName}-CleanupFunction`, `Function Layers - ${data.length}`)
                                        }
                                    }).catch(err => simplify.finishWithErrors(`${opName}-CleanupFunction`, err))
                                })
                            }).catch(err => simplify.finishWithErrors(`${opName}-CleanupBucket`, err))
                        }).catch(function(err) {
                            simplify.finishWithErrors(`${opName}-CleanupResource:`, err)
                        })
                    }
                })
            })
        } else {
            simplify.uploadLocalFile({
                adaptor: provider.getStorage(),
                ...{ bucketKey: bucketKey, inputLocalFile: distYamlFile }
            }).then(function (uploadInfo) {
                var TemplateURL = uploadInfo.Location
                var parameters = {}
                Object.keys(config.Deployment.Servers).map(function (fname) {
                    parameters[`${fname}SecretKeyVault`] = config.Deployment.Servers[fname].SecretKeyVault || "NO"
                    parameters[`${fname}ManagedResourceArn`] = config.Deployment.Servers[fname].ManagedResourceArn || "NO"
                })
                Object.keys(config.Deployment.Functions).map(function (fname) {
                    parameters[`${fname}SecretKeyVault`] = config.Deployment.Functions[fname].SecretKeyVault || "NO"
                    parameters[`${fname}ManagedResourceArn`] = config.Deployment.Functions[fname].ManagedResourceArn || "NO"
                })
                const processStackData = function (stackData) {
                    stackData.apiConfig = { Region: config.Region, Profile: config.Profile }
                    let functionsCsvData = 'Region,Account,FunctionName,Version,LogRetention,KMS,SecureFunction,SecureLog\n'
                    try {
                        Object.keys(config.Deployment.Functions).forEach(function (f) {
                            const fInputPath = path.join(__dirname, config.Deployment.Functions[f].FunctionInput)
                            var fConfig = JSON.parse(fs.readFileSync(fInputPath))
                            stackData.Outputs.map(function (o) {
                                if (o.OutputKey == `${f}FunctionRole`) {
                                    fConfig.Function.Role = o.OutputValue
                                } else if (o.OutputKey == `${f}FunctionName`) {
                                    fConfig.Function.FunctionName = o.OutputValue
                                    functionsCsvData += `${config.Region},${config.AccountId},${fConfig.Function.FunctionName},,14,,FALSE,FALSE\n`
                                }
                            })
                            fs.writeFileSync(fInputPath, JSON.stringify(fConfig, null, 4));
                            config.Deployment.Functions[f].DependsOn.map(server => {
                                const parameterPath = path.join(__dirname, "..", server, "src", "Functions", f, "parameters.json")
                                fs.writeFileSync(parameterPath, JSON.stringify({
                                    FunctionName: fConfig.Function.FunctionName
                                }, null, 4));
                            })
                        })
                        Object.keys(config.Deployment.Servers).forEach(function (f) {
                            const fInputPath = path.join(__dirname, config.Deployment.Servers[f].FunctionInput)
                            var fConfig = JSON.parse(fs.readFileSync(fInputPath))
                            if (!stackData.apiConfig[f]) {
                                stackData.apiConfig[f] = { StageName: `${process.env.DEPLOYMENT_ENV}` }
                            }
                            stackData.Outputs.map(function (o) {
                                if (o.OutputKey == `${f}FunctionRole`) {
                                    fConfig.Function.Role = o.OutputValue
                                } else if (o.OutputKey == `${f}FunctionName`) {
                                    fConfig.Function.FunctionName = o.OutputValue
                                    functionsCsvData += `${config.Region},${config.AccountId},${fConfig.Function.FunctionName},,14,,FALSE,FALSE\n`
                                } else if (o.OutputKey == `${f}Id`) {
                                    stackData.apiConfig[f].GatewayId = o.OutputValue
                                } else if (o.OutputKey == `${f}Url`) {
                                    stackData.apiConfig[f].GatewayUrl = o.OutputValue
                                }
                            })
                            fs.writeFileSync(fInputPath, JSON.stringify(fConfig, null, 4));
                            /* UPDATE API GATEWAY FOR EACH SERVER WITH GATEWAY ID */
                            simplify.updateAPIGatewayDeployment({
                                adaptor: provider.getAPIGateway(),
                                apiConfig: stackData.apiConfig[f]
                            }).then(function (data) {
                                simplify.finishWithMessage(`${f} Endpoint URL`, `${stackData.apiConfig[f].GatewayUrl}`)
                            }).catch(function (err) {
                                simplify.finishWithSuccess(`${f} Endpoint Stage: ${stackData.apiConfig[f].StageName} Update Failed!`)
                            })
                        })
                        fs.writeFileSync(path.join(__dirname, config.OutputFile), JSON.stringify(stackData, null, 4));
                        fs.writeFileSync(path.join(__dirname, config.Environment, 'functions.csv'), functionsCsvData);
                    } catch (err) {
                        simplify.finishWithErrors(`${opName}-UpdateFunctionInput`, err.message)
                    }
                }

                simplify.createOrUpdateStackOnComplete({
                    adaptor: provider.getResource(),
                    ...{
                        stackName: config.Deployment.Name,
                        stackParameters: {
                            Environment: `${process.env.DEPLOYMENT_ENV}`,
                            ApiAuthorizerId: config.Deployment.ApiAuthorizerId,
                            ...parameters
                        },
                        stackTemplate: TemplateURL
                    }
                }).then(stackData => processStackData(stackData)).catch(function (err) {
                    if(`${err.message}`.toLowerCase().startsWith('no updates are to be performed')){
                        const providerResource = provider.getResource()
                        return providerResource.describeStacks({StackName: config.Deployment.Name}).promise().then(descOutput=>{
                            if(!descOutput.Stacks || !descOutput.Stacks.length)
                                throw `Stack [${config.Deployment.Name}] not found`
                            processStackData(descOutput.Stacks[0])
                        })
                    } else {
                        simplify.finishWithErrors(`${opName}-CreateDeployment`, err.message || err.StackId)
                    }
                })
            }, function (err) {
                simplify.finishWithErrors(`${opName}-UploadDirectory`, err)
            })
        }
    }).catch(function (err) {
        simplify.finishWithErrors(`${opName}-LoadCredentials`, err)
    })
} catch (err) {
    simplify.finishWithErrors(`${opName}-LoadConfig`, err)
}
