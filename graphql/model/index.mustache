'use strict'
process.env.AWS_SDK_LOAD_CONFIG = process.env.AWS_SDK_LOAD_CONFIG || true
if (typeof __non_webpack_require__ === 'undefined') global.__non_webpack_require__ = require
const AWS = __non_webpack_require__('aws-sdk')
AWS.config.update({ region: process.env.REGION || "eu-central-1" })
const TableProviderName = process.env.TABLE_PROVIDER || 'DynamoDB'
const { DatabaseTable } = require(`./${TableProviderName}`)

const getLocalCredentials = function(configProfile) {
    return new Promise(function (resolve, reject) {
        AWS.CredentialProviderChain.defaultProviders = [
            function () { return new AWS.EnvironmentCredentials('AWS'); },
            function () { return new AWS.EnvironmentCredentials('AMAZON'); },
            function () { return new AWS.SharedIniFileCredentials(configProfile ? { profile: configProfile } : {}); },
            function () { return new AWS.ECSCredentials(); },
            function () { return new AWS.ProcessCredentials(); },
            function () { return new AWS.TokenFileWebIdentityCredentials(); },
            function () { return new AWS.EC2MetadataCredentials() }
        ]
        new AWS.CredentialProviderChain().resolve(function (err, credentials) {
            err ? reject(err) : resolve(credentials)
        })
    })
}

export default async function () {
    const credentials = await getLocalCredentials(process.env.PROFILE || "default")
    AWS.config.update({ credentials: credentials });
    return {
    {{#DataSource}}
        {{Name}}: new DatabaseTable('{{Name}}'){{#hasMore}},{{/hasMore}}
    {{/DataSource}}
    }
}
