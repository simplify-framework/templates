'use strict';
/** 
 * Simplify Framework - GraphQL {{GeneratorVersion}}
 * GitHub URL   : https://github.com/simplify-framework
 * ProjectName  : {{PROJECT_NamePascal}}
 * ProjectId    : {{PROJECT_Id}}
 * License      : Apache-2.0 (Free)
 */
const path = require('path')
require('dotenv').config({ path: path.join(__dirname, '../../.env') })
global.fetch = require('node-fetch')
const AWS = require('aws-sdk')
const sigV4Client = require('./sigv4gw')
const AmazonCognitoIdentity = require('amazon-cognito-identity-js');
if (typeof __non_webpack_require__ === 'undefined') global.__non_webpack_require__ = require
process.env.AWS_SDK_LOAD_CONFIG= process.env.AWS_SDK_LOAD_CONFIG || true
let apiConfig = {}

export const config = function(config) {
    return new Promise(function(resolve, _) {
        apiConfig = { ...config }
        config.OauthClientId = config.OauthClientId || process.env.OAUTH_CLIENT_ID
        config.OauthAppId = config.OauthAppId || process.env.OAUTH_APP_ID
        config.UserPoolId = config.UserPoolId || process.env.USER_POOL_ID
        if (config.OauthClientId && config.UserPoolId) {
            apiConfig.UserPool = new AmazonCognitoIdentity.CognitoUserPool({
                UserPoolId: config.Deployment.UserPoolId,
                ClientId: config.Deployment.OauthClientId
            });
        }
        apiConfig.get = function(name) {
            return apiConfig[name]
        }
        resolve(apiConfig)
    })
}

function getLocalCredentials(configProfile) {
    return new Promise(function(resolve, reject) {
        AWS.CredentialProviderChain.defaultProviders = [
            function () { return new AWS.EnvironmentCredentials('AWS'); },
            function () { return new AWS.EnvironmentCredentials('AMAZON'); },
            function () { return new AWS.SharedIniFileCredentials(configProfile ? { profile: configProfile } : {}); },
            function () { return new AWS.ECSCredentials(); },
            function () { return new AWS.ProcessCredentials(); },
            function () { return new AWS.TokenFileWebIdentityCredentials(); },
            function () { return new AWS.EC2MetadataCredentials() }
        ]
        new AWS.CredentialProviderChain().resolve(function (err, credentials) {
            if (err) {
                reject(err)
            } else {
                AWS.config.update({ credentials: credentials });
                resolve(credentials)
            }
        })
    })
}

function getCognitoCredentials() {
    AWS.config.update({ region: apiConfig.Region });
    if (apiConfig.OauthAppId) {
        AWS.config.credentials = new AWS.CognitoIdentityCredentials({
            IdentityPoolId: apiConfig.OauthAppId
        });
    }
    return AWS.config.credentials.getPromise();
}

function invokeAwsResourceWithRole(endpoint, { path, method = "GET", headers = {}, queryParams = {}, body }, apiKey) {
    return new Promise(function(resolve, reject) {
        getLocalCredentials(apiConfig.get('Profile')).then(function() {
            const client = sigV4Client.newClient({
                accessKey: AWS.config.credentials.accessKeyId,
                secretKey: AWS.config.credentials.secretAccessKey,
                sessionToken: AWS.config.credentials.sessionToken,
                region: apiConfig.get('Region') || 'eu-west-1'
            })
            const signedRequest = sigV4Client.signRequest(client, { endpoint, method, path, headers, queryParams, body });
            body = body ? JSON.stringify(body) : body;
            headers = signedRequest.headers;
            if (apiKey) headers["x-api-key"] = `${apiKey}`
            fetch(signedRequest.url, { method, headers, body }).then(results => {
                if (results.status !== 200) {
                    results.text().then(message => {
                        resolve({ errors : { message } })
                    })
                } else {
                    results.json().then(data => {
                        resolve(data)
                    })
                }
            })
        })
    })
}

export const getApiKey = function() {
    return new Promise(function(resolve, reject) {
        resolve(process.env.GATEWAY_API_KEY)
    })
}

export const executeIAM = function(path, method, data, apiKey) {
    const options = {
        path: path,
        method: method,
        headers: {
            "Content-Type": "application/json"
        }
    }
    if (method === 'POST' || method === 'PUT') {
        options.body = data
    } else {
        options.queryParams = data
    }
    return invokeAwsResourceWithRole(apiConfig.get('GatewayURL'), options, apiKey)
}

export const executeCognito = function(path, method, data, token, apiKey) {
    const options = {
        method: method,
        headers: {
            "Content-Type": "application/json",
            "Authorization": `${token}`
        }
    }
    if (apiKey) options.headers["x-api-key"] = `${apiKey}`
    let query = ''
    if (method === 'POST' || method === 'PUT') {
        options.body = JSON.stringify(data.body)
    } else {
        query = '?' + new URLSearchParams(data)
    }
    const url = apiConfig.get('GatewayURL') + path + query
    return fetch(url, options).then(data => data.json())
}