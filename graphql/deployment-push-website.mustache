'use strict';
/** 
 * Simplify Framework - GraphQL {{GeneratorVersion}}
 * GitHub URL   : https://github.com/simplify-framework
 * ProjectName  : {{PROJECT_NamePascal}}
 * ProjectId    : {{PROJECT_Id}}
 * License      : Apache-2.0 (Free)
 */
const path = require('path')
const fs = require('fs')
const opName = `Deployment`
const simplify = require('simplify-sdk')
const provider = require('simplify-sdk/provider')
var nodeArgs = process.argv.slice(2);
var configResourceDeletion = false
var configInputFile = process.env.DEPLOYMENT_INPUT || 'deployment-input.json'
while (nodeArgs.length > 0) {
    if (nodeArgs[0] == "--input" || nodeArgs[0] == "-i") {
        configInputFile = nodeArgs[1]
        nodeArgs = nodeArgs.slice(2);
    } else if (nodeArgs[0] == "--deletion" || nodeArgs[0] == "-d") {
        configResourceDeletion = true
        nodeArgs = nodeArgs.slice(1);
    }
}
try {
    var config = simplify.getInputConfig(path.join(__dirname, process.env.DEPLOYMENT_ENV, configInputFile))
    const distYamlFile = path.join(__dirname, process.env.DEPLOYMENT_ENV, "deployment-website.yaml")
    const publicFolder = path.join(__dirname, "..", "public", "dist")
    const deploymentName = `${config.ProjectName}-${process.env.DEPLOYMENT_ENV}-WebResource`
    const bucketKey = config.Bucket.Key
    provider.setConfig(config).then(function () {
        if (configResourceDeletion) {
            const bucketName = "{{PROJECT_NameSnake}}-{{PROJECT_Id}}-{{ENV_Name}}-website"
            simplify.emptyBucketForDeletion({
                adaptor: provider.getStorage(),
                ...{ bucketName: bucketName }
            }).then(function(data) {
                simplify.deleteStackOnComplete({
                    adaptor: provider.getResource(),
                    ...{
                        stackName: deploymentName
                    }
                }).then(function (stackData) {
                    simplify.consoleWithMessage(`${opName}-CleanupStack`, `${deploymentName}`)
                }).catch(function(err) {
                    simplify.finishWithErrors(`${opName}-CleanupResource:`, err)
                })
            })
        } else {
            simplify.uploadLocalFile({
                adaptor: provider.getStorage(),
                ...{ bucketKey: bucketKey, inputLocalFile: distYamlFile }
            }).then(function (uploadInfo) {
                var parameters = {}
                const TemplateURL = uploadInfo.Location
                if (fs.existsSync(path.join(__dirname, config.OutputFile))) {
                    const metaData = JSON.parse(fs.readFileSync(path.join(__dirname, config.OutputFile)))
                    Object.keys(config.Deployment.Servers).forEach(function (f) {
                        parameters[`${f}URL`] = metaData.apiConfig[f].GatewayUrl
                    })
                } else {
                    Object.keys(config.Deployment.Servers).forEach(function (f) {
                        parameters[`${f}URL`] = "NO"
                    })
                }
                simplify.createOrUpdateStackOnComplete({
                    adaptor: provider.getResource(),
                    ...{
                        stackName: deploymentName,
                        stackParameters: {
                            Environment: '{{ENV_Name}}',
                            ResourceArn: 'NO',
                            ...parameters
                        },
                        stackTemplate: TemplateURL
                    }
                }).then(function (stackData) {
                    let outputResult = {}
                    stackData.Outputs.map(function (o) {
                        if (o.OutputKey == `ResourceName`) {
                            outputResult.ResourceName = o.OutputValue
                        } else if (o.OutputKey == `WebsiteURL`) {
                            outputResult.WebsiteURL = o.OutputValue
                        }
                    })
                    simplify.consoleWithMessage(`${opName}-CreateDeployment`, `${outputResult.ResourceName}`)
                    simplify.uploadLocalDirectory({
                        adaptor: provider.getStorage(),
                        ...{ publicACL: true, bucketName: "{{PROJECT_NameSnake}}-{{PROJECT_Id}}-{{ENV_Name}}-website", inputDirectory: publicFolder }
                    }).then(function (uploadInfo) {
                        simplify.consoleWithMessage(`${opName}-WebsiteUpload`, `PublicURL: ${outputResult.WebsiteURL}`)
                    })
                }, function (err) {
                    simplify.finishWithErrors(`${opName}-CreateDeployment`, err.message || err.StackId)
                })
            }, function (err) {
                simplify.finishWithErrors(`${opName}-UploadDirectory`, err)
            })
        }
    }).catch(function (err) {
        simplify.finishWithErrors(`${opName}-LoadCredentials`, err)
    })
} catch (err) {
    simplify.finishWithErrors(`${opName}-LoadConfig`, err)
}