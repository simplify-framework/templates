'use strict';
/** 
 * Simplify Framework - CodeGen {{generatorVersion}}
 * GitHub URL   : https://github.com/simplify-framework
 * PROJECT_Name  : {{projectNamePascal}}
 * PROJECT_Id    : {{projectId}}
 * License      : Apache-2.0 (Free)
 */
if (typeof __non_webpack_require__ === 'undefined') global.__non_webpack_require__ = require
const path = require('path');
const express = require('express')
const bodyParser = require('body-parser')
const createSwaggerExpressMiddleware = require('@apidevtools/swagger-express-middleware');
const customSanitizeParamsMiddleware = require('./utils/sanitizer').customSanitizeParamsMiddleware

{{#serviceHystrixStream}}
var Brakes = require('brakes');
var globalStats = Brakes.getGlobalStats();
{{/serviceHystrixStream}}

let app = express()
let specYAML = path.join(__dirname, './specs/swagger.yaml');

createSwaggerExpressMiddleware(specYAML, app, function (err, middleware) {
    if (err) {
        console.error(`createSwaggerExpressMiddleware: ${err}`)
    } else {
        app.use(bodyParser.json())
        app.use(middleware.metadata());
        app.use(middleware.CORS());
        {{#serviceValidation}}
        app.use(middleware.parseRequest());
        function parseRequestErrorHandler(err, req, res, next) {
            res.status(500).json({
                code: "ErrorServiceParseRequestException",
                message: err.message
            });
        }
        app.use(parseRequestErrorHandler);
        {{/serviceValidation}}
        app.use(customSanitizeParamsMiddleware);
        {{#serviceEntries}}
        {{#operations}}
        app.{{httpMethodLowerCase}}("{{replacedPathName}}", require("./operations/{{operationId}}"));    
        {{/operations}}
        {{/serviceEntries}}

        app.use(function (err, req, res, next, statusCode) {
            if (res.headersSent) {
                return next(err);
            } else {
                res.status(statusCode || 500).json({
                    code: "ErrorGlobalServiceException",
                    message: err.message
                });
            }
        });

        app.listen(3000, function () {// NOSONAR
            console.log("node express service - ".concat("debugging"));
        });
    }
})