'use strict';
/** 
 * Simplify Framework - CodeGen {{generatorVersion}}
 * GitHub URL   : https://github.com/simplify-framework
 * ProjectName  : {{projectNamePascal}}
 * ProjectId    : {{projectId}}
 * License      : Apache-2.0 (Free)
 */
const path = require('path')
const fs = require('fs')
const opName = `FunctionLayer`
var nodeArgs = process.argv.slice(2);
const simplify = require('simplify-sdk')
const provider = require('simplify-sdk/provider')
var configInputFile = process.env.FUNCTION_INPUT || "function-input.json"
var configSrcDir =  process.env.LAYER_SOURCE || "layer"
process.env.ENFORCEMENT_PACKAGE = process.env.ENFORCEMENT_PACKAGE || ''
process.env.DEPLOYMENT_STAGE = process.env.DEPLOYMENT_STAGE || 'latest'
while (nodeArgs.length > 1) {
    if (nodeArgs[0] == "--input" || nodeArgs[0] == "-i") {
        configInputFile =  nodeArgs[1]
    } else if (nodeArgs[0] == "--src" || nodeArgs[0] == "-s") {
        configSrcDir = nodeArgs[1]
    }
    nodeArgs = nodeArgs.slice(2);
}
try {
    var config = simplify.getInputConfig(path.join(__dirname, configInputFile))
    const layerConfig = config.LayerConfig
    const functionConfig = config.Function
    const bucketName = config.Bucket.Name
    const bucketKey = config.Bucket.Key
    const inputDirectory = path.join(__dirname, configSrcDir)
    const distZippedPath = path.join(__dirname, 'dist')
    const outputFilePath = path.join(distZippedPath, bucketKey)
    if (process.env.ENFORCEMENT_PACKAGE && process.env.DEPLOYMENT_STAGE==='enforce') {
        layerConfig.LayerName = process.env.ENFORCEMENT_PACKAGE
    }
    provider.setConfig(config).then(function() {
        simplify.uploadDirectoryAsZip({
            adaptor: provider.getStorage(), ...{
                bucketKey, inputDirectory, outputFilePath
            }
        }).then(function (uploadInfor) {
            simplify.createFunctionLayerVersion({
                adaptor: provider.getFunction(),
                ...{ layerConfig, functionConfig, bucketName, bucketKey: uploadInfor.Key }
            }).then(function (data) {
                try {                    
                    let configInput = JSON.parse(fs.readFileSync(path.join(__dirname, configInputFile)))
                    configInput.Function.Layers = data.Layers
                    fs.writeFileSync(path.join(__dirname, configInputFile), JSON.stringify(configInput, null, 4))
                    let metaOutput = JSON.parse(fs.readFileSync(path.join(__dirname, configInput.OutputFile)))
                    const LAYER_NAME = layerConfig.LayerName.split('-').join('_').toUpperCase()
                    metaOutput.Configuration.Environment.Variables[`SHA256_LAYER_${LAYER_NAME}_HASH`] = uploadInfor.FileSha256
                    fs.writeFileSync(path.join(__dirname, configInput.OutputFile), JSON.stringify(metaOutput, null, 4));
                } catch(err) {
                    simplify.finishWithErrors(`${opName}-Update`, err);
                }
            }, function(err) {
                simplify.finishWithErrors(`${opName}-Update`, err);
            })
        }, function(err) {
            simplify.finishWithErrors(`${opName}-UploadZip`, err);
        })
    }).catch(function (err) {
        simplify.finishWithErrors(`${opName}-UploadDirectory`, err)
    })
} catch (err) {
    simplify.finishWithErrors(`${opName}-LoadConfig`, err)
}
