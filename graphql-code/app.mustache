'use strict';
/** 
 * Simplify Framework - GraphQL {{GeneratorVersion}}
 * GitHub URL   : https://github.com/simplify-framework
 * ProjectName  : {{PROJECT_NamePascal}}
 * ProjectId    : {{PROJECT_Id}}
 * License      : Apache-2.0 (Free)
 */
const fs = require('fs')
const path = require('path')
const DateTime = require('./Utilities/iso8601')
const express = require('{{NameSnake}}-deps')['express']
const { ApolloServer, gql } = require('{{NameSnake}}-deps')['apollo-server-express']
const schema = fs.readFileSync(path.resolve(__dirname, 'schema.graphql'), 'utf8')
const typeDefs = gql(schema);
const app = express()
if (typeof __non_webpack_require__ === 'undefined') global.__non_webpack_require__ = require

{{#Definitions}}
{{#Paths}}
{{#Resolvers}}
{{#Resolver}}const { {{Name}} } = require('./Resolvers/{{Name}}'){{/Resolver}}
{{/Resolvers}}
{{/Paths}}
{{/Definitions}}

const resolvers = {
    DateTime: DateTime,
    {{#Definitions}}
    {{{Definition}}}: {
    {{#Paths}}
    // POST {{Path}} {{#Options}}using {{AuthMode}} authorization with ApiKey={{ApiKey}}{{/Options}}
    {{#Resolvers}}
        {{OperationId}}: (parent, args, context, info) => {{#Resolver}}{{Name}}(parent, args, context, info){{/Resolver}}{{#hasMore}},{{/hasMore}}
    {{/Resolvers}}
    {{#hasMore}},{{/hasMore}}{{^hasMore}}// END{{/hasMore}}
    {{/Paths}}
    }{{#hasMore}},{{/hasMore}}
    {{/Definitions}}
}

const server = new ApolloServer({
    typeDefs, resolvers, context: ({ req }) => ({
        requestContext: req
    }),
    introspection: (process.env.INTROSPECTION === "YES") ? true : false
})

server.applyMiddleware({ app })

if (process.env.LOCAL_SERVER === "YES") {
    app.listen({ port: 4000 }, () => {
        console.log(`GraphQL server is ready at http://localhost:4000${server.graphqlPath}`)
    })
}

module.exports = app
