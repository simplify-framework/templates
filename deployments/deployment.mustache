AWSTemplateFormatVersion: '2010-09-09'
Description: API Gateway resource stack creation using Simplify CLI
Parameters:
  DeploymentStage:
    Type: String
    Default: 'latest'
    AllowedValues:
    - stable
    - latest
  ApiAuthorizerId:
    Type: String
  {{#services}}
  {{serviceName}}CustomResourceArn:
    Type: String
  {{serviceName}}ResourcePermission:
    Type: String
  {{/services}}

Conditions:
  {{#services}}
  Has{{serviceNamePascal}}CustomResourceArn: !Not [ !Equals [ !Ref {{serviceName}}CustomResourceArn, 'NO' ] ]
  Has{{serviceNamePascal}}ResourcePermission: !Not [ !Equals [ !Ref {{serviceName}}ResourcePermission, 'NO' ] ]
  {{/services}}

Resources:
{{#gatewayNameExisted}}
  {{gatewayName}}:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: '{{gatewayName}} Definitions'
      Name: {{gatewayName}}
      Body:
        swagger: '2.0'
        info:
          version: '2017-04-20T04:08:08Z'
          title: {{gatewayName}}        
        host:
          Fn::Join:
          - ''
          - - apigateway.
            - Ref: AWS::Region
            - ".amazonaws.com"
        basePath:
          Fn::Join:
          - ''
          - - "/"
            - "{{apiVersion}}"
        schemes:
        - https
        x-amazon-apigateway-request-validators:
          Passthrough:
            validateRequestParameters: false
            validateRequestBody: false
          Validate body:
            validateRequestParameters: false
            validateRequestBody: true
          Validate query string parameters and headers:
            validateRequestParameters: true
            validateRequestBody: false
        x-amazon-apigateway-request-validator: Passthrough
        paths:
          {{#services}}      
          {{#serviceEntries}}
          {{#servicePublicBoolean}}
          "{{path}}":            
            {{#hasOptions}}
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock            
            {{/hasOptions}}
            {{^hasOptions}}
            {{/hasOptions}}
            {{#operations}}
            {{httpMethodLowerCase}}:
              consumes:
              - application/json
              produces:
              - application/json
              {{#httpMethodHasBody}}
              parameters:
              - in: body
                name: RequestSchema
                required: false
                schema:
                  "$ref": "#/definitions/RequestSchema"
              {{/httpMethodHasBody}}
              {{^httpMethodHasBody}}
              parameters:
              - in: query
                name: search
                required: false
              {{/httpMethodHasBody}}
              security:
              {{#serviceApiKey}}
              - APIKeyAuthorizer: []
              {{/serviceApiKey}}
              {{#serviceAuthorizer}}
                {{#authorizerIdExisted}}
              - CognitoAuthorizer: []
                {{/authorizerIdExisted}}
                {{^authorizerIdExisted}}
              - sigv4: []
                {{/authorizerIdExisted}}
              {{/serviceAuthorizer}}
              {{^serviceAuthorizer}}
              {{^serviceApiKey}}
              - sigv4: []
              {{/serviceApiKey}}
              {{/serviceAuthorizer}}
              responses:
                '200':
                  description: 200 response
                  schema:
                    "$ref": "#/definitions/ResponseSchema"                                    
              x-amazon-apigateway-request-validator: Passthrough
              x-amazon-apigateway-integration:                
                responses:
                  default:
                    statusCode: '200'                
                uri:
                  Fn::Join:
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref AWS::Region
                    - ":lambda:path/2015-03-31/functions/"
                    - !GetAtt {{serviceName}}LambdaFunction.Arn
                    - "/invocations"                
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          {{/operations}}
          {{/servicePublicBoolean}}
          {{/serviceEntries}}
          {{/services}}
        securityDefinitions:
          sigv4:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: awsSigv4
          APIKeyAuthorizer:
            type: apiKey
            name: x-api-key
            in: header
          {{#authorizerIdExisted}}
          CognitoAuthorizer:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              type: cognito_user_pools
              providerARNs:
              - Fn::Sub:
                - arn:aws:cognito-idp:${region}:${account}:userpool/${userPoolId}
                - region:
                    !Ref AWS::Region
                  account:
                    !Ref AWS::AccountId
                  userPoolId:
                    !Ref ApiAuthorizerId
          {{/authorizerIdExisted}}
        definitions:
          RequestSchema:
            type: object
            required:
            - data
            properties:
              data:
                type: object
            title: Request Schema
          ResponseSchema:
            type: object
            required:
            - data
            properties:
              data:
                type: object
            title: Response Schema        
      FailOnWarnings: true

  {{gatewayName}}APIGateWayDeployment:
    DependsOn: {{gatewayName}}
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: The Development stage deployment of {{gatewayName}} API.
      StageName: !Ref DeploymentStage
      RestApiId:
        !Ref {{gatewayName}}

  {{gatewayName}}APIGateWayUsagePlan:
    DependsOn: {{gatewayName}}APIGateWayDeployment
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      Description: The quota limits of {{gatewayName}} API.
      UsagePlanName: {{gatewayName}}-DefaultPlan
      ApiStages:
      - ApiId: !Ref {{gatewayName}}
        Stage: !Ref DeploymentStage
      Throttle:
        BurstLimit: {{burstLimit}}
        RateLimit: {{rateLimit}}
      Quota:
        Limit: {{quotaLimit}}
        Period: "{{quotaUnitOrigin}}"

  {{gatewayName}}APIGateWayApiKey:
    DependsOn: {{gatewayName}}APIGateWayDeployment
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Enabled: true
      StageKeys: 
        - RestApiId: !Ref {{gatewayName}}
          StageName: !Ref DeploymentStage
      Value: {{gatewayApiKey}}
  
  {{gatewayName}}APIGateWayUsagePlanKey:
    DependsOn: {{gatewayName}}APIGateWayApiKey
    Type: AWS::ApiGateway::UsagePlanKey
    Properties: 
      KeyId: !Ref {{gatewayName}}APIGateWayApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref {{gatewayName}}APIGateWayUsagePlan

{{/gatewayNameExisted}}
{{#services}}
  {{serviceName}}LambdaFunction:
    Type: AWS::Lambda::Function
    Metadata:
      aws:asset:path: "./src"
      aws:asset:property: Code
    Properties:
      Handler: index.handler      
      Environment:
        Variables:
          DEPLOYMENT_STAGE:
            !Ref DeploymentStage
      Role:
        Fn::GetAtt:
        - {{serviceName}}LambdaExecutionRole
        - Arn
      Runtime: {{serviceRuntimeOrigin}}
      Timeout: '15'
      Code:
        ZipFile: |
          {{serviceCode}}

  {{serviceName}}LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:      
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - !If [Has{{serviceNamePascal}}ResourcePermission, !Ref {{serviceName}}ResourcePermission, !Ref "AWS::NoValue"]

  {{serviceName}}LambdaExecutionPolicy:
    DependsOn:
    - {{serviceName}}LambdaExecutionRole
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Join:
        - ""
        - - !Ref {{serviceName}}LambdaFunction
          - LambdaExecutionRole
      Roles:
      - !Ref {{serviceName}}LambdaExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - Fn::Sub:
            - arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${groupname}:log-stream:*
            - region:
                !Ref AWS::Region
              account:
                !Ref AWS::AccountId
              groupname:
                !Ref {{serviceName}}LambdaFunction

  {{serviceName}}LambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: {{serviceName}}LambdaFunction
    Properties:
      LogGroupName:
        Fn::Join:
        - ""
        - - '/aws/lambda/'
          - !Ref {{serviceName}}LambdaFunction
      RetentionInDays: 14

{{#serviceKeyVault}}
  {{serviceName}}Secret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Secret manager for {{serviceName}}LambdaFunction
      GenerateSecretString:
        SecretStringTemplate: '{"{{serviceNamePascal}}Type":"AutoRotation"}'
        GenerateStringKey: {{serviceNamePascal}}Key
        ExcludeCharacters: '"@/\'
        ExcludeLowercase: false
        ExcludeNumbers: false
        ExcludePunctuation: false
        ExcludeUppercase: false
        PasswordLength: 48

  {{serviceName}}SecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    DependsOn: {{serviceName}}LambdaFunction
    Properties:
      SecretId: !Ref {{serviceName}}Secret
      RotationLambdaARN: !GetAtt {{serviceName}}LambdaFunction.Arn
      RotationRules:
        AutomaticallyAfterDays: 30

  {{serviceName}}SecretLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt {{serviceName}}LambdaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: secretsmanager.amazonaws.com

  {{serviceName}}SecretMangerPolicy:
    DependsOn:
    - {{serviceName}}LambdaExecutionRole
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Join:
        - ""
        - - !Ref {{serviceName}}LambdaFunction
          - SecretMangerPolicy
      Roles:
      - !Ref {{serviceName}}LambdaExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - secretsmanager:GetSecretValue
          - secretsmanager:PutSecretValue
          Resource:
          - Fn::Sub:
            - arn:aws:secretsmanager:${region}:${account}:${secretname}-*
            - region:
                !Ref AWS::Region
              account:
                !Ref AWS::AccountId
              secretname:
                !Ref {{serviceName}}Secret
{{/serviceKeyVault}}

  {{serviceName}}CustomResource:
    Condition: Has{{serviceNamePascal}}CustomResourceArn
    DependsOn:
    - {{serviceName}}LambdaFunction
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !Ref {{serviceName}}CustomResourceArn

{{#gatewayNameExisted}}
  {{serviceName}}LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref {{serviceName}}LambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":"
          - !Ref {{gatewayName}}
          - "/*/*/*"
{{/gatewayNameExisted}}

{{#serviceScheduleExisted}}
  {{serviceName}}ScheduledRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: ScheduledRule
      ScheduleExpression: {{serviceScheduleOrigin}}
      State: ENABLED
      Targets: 
        - Arn: !GetAtt {{serviceName}}LambdaFunction.Arn
          Id: {{serviceName}}TargetFunction

  {{serviceName}}PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref {{serviceName}}LambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt {{serviceName}}ScheduledRule.Arn
{{/serviceScheduleExisted}}
{{/services}}

Outputs:
{{#gatewayNameExisted}}
  Region:
    Description: AWS Deployment Region
    Value: !Ref AWS::Region
  GatewayUrl:
    Description: Root URL of the API gateway
    Value:
      Fn::Join:
      - ''
      - - https://
        - !Ref {{gatewayName}}
        - ".execute-api."
        - !Ref AWS::Region
        - ".amazonaws.com/"
        - !Ref DeploymentStage
  GatewayId:
    Description: API Gateway id
    Value: !Ref {{gatewayName}}
  StageName:
    Description: API Deployment stage
    Value: !Ref DeploymentStage
{{/gatewayNameExisted}}
  {{#services}}
  {{serviceName}}FunctionArn:
    Description: {{serviceNamePascal}} Function ARN
    Value: !GetAtt {{serviceName}}LambdaFunction.Arn
  {{serviceName}}FunctionName:
    Description: {{serviceNamePascal}} Function Name
    Value: !Ref {{serviceName}}LambdaFunction
  {{serviceName}}FunctionRole:
    Description: {{serviceNamePascal}} Execution Role ARN
    Value: !GetAtt {{serviceName}}LambdaExecutionRole.Arn
  {{/services}}