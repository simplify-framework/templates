'use strict';
/** 
 * Simplify Framework - CodeGen {{generatorVersion}}
 * GitHub URL   : https://github.com/simplify-framework
 * PROJECT_Name  : {{projectNamePascal}}
 * PROJECT_Id    : {{projectId}}
 * License      : Apache-2.0 (Free)
 */
const path = require('path')
const fs = require('fs')
const opName = `Deployment`
const simplify = require('simplify-sdk')
const provider = require('simplify-sdk/provider')
var nodeArgs = process.argv.slice(2);
var configResourceDeletion = false
var configInputFile = process.env.DEPLOYMENT_INPUT || "deployment.json"
while (nodeArgs.length > 0) {
    if (nodeArgs[0] == "--input" || nodeArgs[0] == "-i") {
        configInputFile = nodeArgs[1]
        nodeArgs = nodeArgs.slice(2);
    } else if (nodeArgs[0] == "--deletion" || nodeArgs[0] == "-d") {
        configResourceDeletion = true
        nodeArgs = nodeArgs.slice(1);
    }
}
try {
    var config = simplify.getInputConfig(path.join(__dirname, configInputFile))
    const distYamlFile = path.join(__dirname, config.Deployment.Definition)
    const bucketName = config.Bucket.Name
    const bucketKey = config.Bucket.Key
    provider.setConfig(config).then(function () {
        if (configResourceDeletion) {
            simplify.consoleWithMessage(`${opName}-CleanupResource`, `Deployment Name - (${config.Deployment.Name})`)
            simplify.deleteStackOnComplete({
                adaptor: provider.getResource(),
                ...{
                    stackName: config.Deployment.Name
                }
            }).then(function (stackData) {
                simplify.deleteENV_Bucket({ adaptor: provider.getStorage(), bucketName: bucketName }).then(function() {
                    Object.keys(config.Deployment.Functions).forEach(function (f) {
                        const fInputPath = path.join(__dirname, config.Deployment.Functions[f].FunctionInput)
                        var fConfig = JSON.parse(fs.readFileSync(fInputPath))
                        simplify.deleteFunctionLayerVersions({
                            adaptor: provider.getFunction(),
                            functionConfig: fConfig.Function
                        }).then(function(data) {
                            simplify.finishWithMessage(`${opName}-CleanupFunction`, `Function Layers - ${data.length}`)
                        }).catch(err => simplify.finishWithErrors(`${opName}-CleanupFunction`, err))
                    })
                }).catch(err => simplify.finishWithErrors(`${opName}-CleanupBucket`, err))
            }).catch(function(err) {
                simplify.finishWithErrors(`${opName}-CleanupResource:`, err)
            })
        } else {
            simplify.uploadLocalFile({
                adaptor: provider.getStorage(),
                ...{ bucketKey: bucketKey, inputLocalFile: distYamlFile }
            }).then(function (uploadInfo) {
                var TemplateURL = uploadInfo.Location
                var parameters = {}
                Object.keys(config.Deployment.Functions).map(function (fname) {
                    parameters[`${fname}CustomResourceArn`] = config.Deployment.Functions[fname].CustomResourceArn || "NO"
                    parameters[`${fname}ResourcePermission`] = config.Deployment.Functions[fname].ResourcePermission || "NO"
                })
                simplify.createOrUpdateStackOnComplete({
                    adaptor: provider.getResource(),
                    ...{
                        stackName: config.Deployment.Name,
                        stackParameters: {
                            DeploymentStage: 'latest',
                            ApiAuthorizerId: config.Deployment.Authorizer,
                            ...parameters
                        },
                        stackTemplate: TemplateURL
                    }
                }).then(function (stackData) {
                    stackData.apiConfig = { Region: config.Region, Profile: config.Profile, StageName: 'latest' }
                    stackData.Outputs.map(function (o) {
                        if (o.OutputKey == `GatewayUrl`) {
                            stackData.apiConfig.GatewayURL = o.OutputValue
                        } else if (o.OutputKey == `StageName`) {
                            stackData.apiConfig.StageName = o.OutputValue
                        } else if (o.OutputKey == `GatewayId`) {
                            stackData.apiConfig.GatewayId = o.OutputValue
                        }
                    })
                    try {
                        fs.writeFileSync(path.join(__dirname, config.OutputFile), JSON.stringify(stackData, null, 4));
                        Object.keys(config.Deployment.Functions).forEach(function (f) {
                            const fInputPath = path.join(__dirname, config.Deployment.Functions[f].FunctionInput)
                            var fConfig = JSON.parse(fs.readFileSync(fInputPath))
                            stackData.Outputs.map(function (o) {
                                if (o.OutputKey == `${f}FunctionRole`) {
                                    fConfig.Function.Role = o.OutputValue
                                } else if (o.OutputKey == `${f}FunctionName`) {
                                    fConfig.Function.FunctionName = o.OutputValue
                                }
                            })
                            fs.writeFileSync(fInputPath, JSON.stringify(fConfig, null, 4));
                        })
                        simplify.updateAPIGatewayDeployment({
                            adaptor: provider.getAPIGateway(),
                            apiConfig: stackData.apiConfig
                        }).then(function (data) {
                            simplify.finishWithSuccess(`API Gateway URL: ${stackData.apiConfig.GatewayURL}`)
                        }).catch(function (err) {
                            simplify.finishWithSuccess(`API Gateway Stage: ${stackData.apiConfig.StageName} Update Failed!`)
                        })
                    } catch (err) {
                        simplify.finishWithErrors(`${opName}-UpdateFunctionInput`, err.message)
                    }
                }, function (err) {
                    simplify.finishWithErrors(`${opName}-CreateDeployment`, err.message || err.StackId)
                })
            }, function (err) {
                simplify.finishWithErrors(`${opName}-UploadDirectory`, err)
            })
        }
    }).catch(function (err) {
        simplify.finishWithErrors(`${opName}-LoadCredentials`, err)
    })
} catch (err) {
    simplify.finishWithErrors(`${opName}-LoadConfig`, err)
}